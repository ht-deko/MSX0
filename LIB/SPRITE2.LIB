(*
    SPRITE2.LIB
*)

type
  TSpDat8 = array [0..7] of byte;
  TSpDat16 = array [0..31] of byte;
  TSpAtr =
    record
      Row: byte;
      Col: byte;
      PtnNo: byte;
      Color: byte;
    end;
  TSpClrs = array [0..15] of byte;

var
  _SpPtnAddr: Integer;
  _SpAtrAddr: Integer;
  _SpClrAddr: Integer;
  _SpPtnSize: byte;

procedure InitSprite(Size: byte);
begin
  _SpPtnAddr := PattTable;
  _SpAtrAddr := TranspTable;
  _SpClrAddr := ColorTable;
  if (Size mod 2) = 0 then
    _SpPtnSize := 8
  else
    _SpPtnSize := 32;
  ClearSprites;
  SpriteSize(Size);
end;

function CalcSpPtnAddr(PtnNo: byte): Integer;
begin
  CalcSpPtnAddr := _SpPtnAddr + PtnNo * _SpPtnSize;
end;

function CalcSpAtrAddr(Plane: byte): Integer;
begin
  CalcSpAtrAddr := _SpAtrAddr + Plane * 4;
end;

function CalcSpClrAddr(Plane: byte): Integer;
begin
  CalcSpClrAddr := _SpClrAddr + Plane * 16;
end;

procedure SetSpritePtn(PtnNo: byte; var Ptn: byte);
begin
  LibRegs.BC := _SpPtnSize;
  LibRegs.DE := _SpPtnAddr + PtnNo * LibRegs.BC;
  LibRegs.HL := Addr(Ptn);
  Bios($005C);
end;

procedure ColorSprite(Plane: byte; var Colors: byte);
begin
  LibRegs.HL := Addr(Colors);
  LibRegs.BC := 16;
  LibRegs.DE := _SpClrAddr + Plane * LibRegs.BC;
  Bios($005C);
end;

procedure PutSprite(Plane: byte; X, Y: byte; Color: byte; PtnNo: byte);
var
  Atr: TSpAtr;
begin
  Atr.Col := X;
  Atr.Row := Y;
  Atr.PtnNo := PtnNo;
  Atr.Color := Color;
  LibRegs.HL := Addr(Atr);
  LibRegs.BC := 4;
  LibRegs.DE := _SpAtrAddr + Plane * LibRegs.BC;
  Bios($005C);
end;

procedure SetSpriteAtr(Plane: byte; var Atr: TSpAtr);
begin
  LibRegs.HL := Addr(Atr);
  LibRegs.BC := 4;
  LibRegs.DE := _SpAtrAddr + Plane * LibRegs.BC;
  Bios($005C);
end;

procedure ShowSprite(Flg: Boolean);
begin
  WriteVdp(8, (ReadVdp(8) and $FD) or (Ord(not Flg) shl 1));
end;    
