(*
    SPRITE2.LIB
*)

type
  TSpDat8 = array [0..7] of byte;
  TSpDat16 = array [0..31] of byte;
  TSpAtr =
    record
      Row: byte;
      Col: byte;
      PatNo: byte;
      Color: byte;
    end;
  TSpClrs = array [0..15] of byte;

var
  _PatAddr: Integer;
  _AtrAddr: Integer;
  _ClrAddr: Integer;
  _PatSize: byte;

procedure InitSprite(Size: byte);
begin
  _PatAddr := PattTable;
  _AtrAddr := TranspTable;
  _ClrAddr := ColorTable;
  if (Size mod 2) = 0 then
    _PatSize := 8
  else
    _PatSize := 32;
  ClearSprites;
  SpriteSize(Size);
end;

function CalcPatAddr(Pat: byte): Integer;
begin
  CalcPatAddr := _PatAddr + Pat * _PatSize;
end;

function CalcAtrAddr(Plane: byte): Integer;
begin
  CalcAtrAddr := _AtrAddr + Plane * 4;
end;

function CalcClrAddr(Plane: byte): Integer;
begin
  CalcClrAddr := _ClrAddr + Plane * 16;
end;

procedure SetSpritePtn(Pat: byte; var Ptn: byte);
begin
  LibRegs.BC := _PatSize;
  LibRegs.DE := _PatAddr + Pat * LibRegs.BC;
  LibRegs.HL := Addr(Ptn);
  Bios($005C);
end;

procedure ColorSprite(Plane: byte; var Colors: byte);
begin
  LibRegs.HL := Addr(Colors);
  LibRegs.BC := 16;
  LibRegs.DE := _ClrAddr + Plane * LibRegs.BC;
  Bios($005C);
end;

procedure PutSprite(Plane: byte; X, Y: byte; Color: byte; Pat: byte);
var
  Atr: TSpAtr;
begin
  Atr.Col := X;
  Atr.Row := Y;
  Atr.PatNo := Pat;
  Atr.Color := Color;
  LibRegs.HL := Addr(Atr);
  LibRegs.BC := 4;
  LibRegs.DE := _AtrAddr + Plane * LibRegs.BC;
  Bios($005C);
end;

procedure SetSpriteAtr(Plane: byte; var Atr: TSpAtr);
begin
  LibRegs.HL := Addr(Atr);
  LibRegs.BC := 4;
  LibRegs.DE := _AtrAddr + Plane * LibRegs.BC;
  Bios($005C);
end;

procedure ShowSprite(Flg: Boolean);
begin
  WriteVdp(8, (ReadVdp(8) and $FD) or (Ord(not Flg) shl 1));
end;    
